<Page x:Class="WPFTips.ListViews.ListViewPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WPFTips.ListViews"
      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="800"
      Title="ListViewPage">

    <Page.DataContext>
        <local:ListViewWindowViewModel/>
    </Page.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <ListView ItemsSource="{Binding StringList}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="デフォルトのListView">
                    </GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

        <ListView ItemsSource="{Binding StringList}"
                  Grid.Column="1"
                  >

            <!-- ItemContainerStyle を再定義。コード量自体は多いが、難しい処理ではない。
                 自分がこのコードを書く理由は、大半がマウスオーバー時に項目の色が変化するのを無効にしたい場合。
                 これだけ大掛かりなコードを書かないと無効にできない。この動作そんなに重要なんだろうか？
                 複数箇所でリストビューを使う場合は リソースで別途定義したりして共通化させる。 -->

            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="SnapsToDevicePixels"
                            Value="true" />
                    <Setter Property="OverridesDefaultStyle"
                            Value="true" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListViewItem">
                                <ContentControl>

                                    <!-- ダブルクリックした ListViewItem を取得するためのコード。
                                         ControlTemplate 内からは、当然のように ListView やデータコンテキストにアクセスすることができないため、
                                         内側から　RelativeSource で page や window までさかのぼり、データコンテキストを見つけてコマンドを実行。
                                         同じように実行時には上方に存在するであろう ListViewItem を探してパラメータに渡す。
                                         信じられないほどまわりくどい。もっとスマートな方法はないんだろうか？

                                         尚、ヘッダーや空白部のクリックが反応しても構わないなら ListView から直接ダブルクリックでイベントを拾える。
                                         xaml で直接 ListViewItem を宣言している場合も（試してないけど多分）もっとスマートなコードになると思う。
                                         このコードでは ListView.ItemsSource に List をバインドしているので無理。
                                    -->
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseDoubleClick">
                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=Page},
                                                Path=DataContext.DoubleClickCommand }"
                                                                   CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ListViewItem}}"
                                                                   />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>

                                    <Border x:Name="Border"
                                              Padding="2"
                                              SnapsToDevicePixels="true"
                                              Background="Transparent">

                                        <GridViewRowPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    </Border>

                                    <VisualStateManager.VisualStateGroups>
                                        <VisualStateGroup x:Name="CommonStates">
                                            <VisualState x:Name="Normal" />
                                            <VisualState x:Name="MouseOver" />
                                            <VisualState x:Name="Disabled" />
                                        </VisualStateGroup>

                                        <VisualStateGroup x:Name="SelectionStates">
                                            <VisualState x:Name="Unselected" />
                                            <VisualState x:Name="Selected">
                                                <Storyboard>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                                  Storyboard.TargetProperty="(Panel.Background).  (SolidColorBrush.Color)">
                                                        <EasingColorKeyFrame KeyTime="0"
                                                                             Value="Red" />
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>

                                            <VisualState x:Name="SelectedUnfocused">
                                                <Storyboard>
                                                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                                                  Storyboard.TargetProperty="(Panel.Background).  (SolidColorBrush.Color)">
                                                        <EasingColorKeyFrame KeyTime="0"
                                                                             Value="Red" />
                                                    </ColorAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </VisualState>

                                        </VisualStateGroup>
                                    </VisualStateManager.VisualStateGroups>
                                </ContentControl>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>

            </ListView.ItemContainerStyle>

            <ListView.View>
                <GridView>
                    <GridViewColumn Header="コントロールテンプレートを再定義したListView"/>
                </GridView>
            </ListView.View>
        </ListView>

        
    </Grid>
</Page>
